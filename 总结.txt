一、c++的封装特性相关的内容
1）如何定义类中的数据成员
    [const/static]   数据类型  成员名;
    访问类中的数据成员：类外  对象名.数据成员名；  类内：数据成员名
   
2）如何定义类中的函数成员
     类内定义：返回类型 函数名(【形参列表】){}  如果我们将函数成员定义在类的内部，系统将默认为该函数时内联函数
	 类外定义：需要先在类声明
	                    返回类型  类名::成员函数名(【形参列表】){}   ---- 常用
						 :: 作用域限定符，用来说明指定的成员属于哪一个类的
	
     调用成员函数： 类外： 对象名.成员函数名（【实参类别】）;   如果通过类外的对象调用成员，需要保证该成员是public
	                           类内：可以通过成员函数来调用其他的成员函数： 成员函数名(【实参列表】);
							   
	普通函数与类中的成员函数的区别：
	1.类中成员函数在类外定义时需要在其名字前加类名做限定，普通函数不需要
	2.类中的成员函数只能被该类所创建的对象所调用，而普通函数，谁都可以调用
	3.成员函数一般存在一个隐形的形参叫this.
	

3)成员访问修饰符
    public: 修饰的成员都是公开的，不管是在类内还类外都是实现对它的调用
	protected: 修饰的成员不能直接外部对象直接调用，可以在类内或该类的派生类内进行使用
	private:修饰的成员不能直接外部对象所调用，直限制在当前类的内部使用。
	注意：1.类中可以同时存在多个，每个修饰符的限定范围：从该关键字开始到遇到下一个限定符或类结束符为止。
	
4）构造函数
    作用：主要实现对类中的数据成员进行初始化
	构造函数定义的特点： 构造函数名必须和类名一样；构造函数没有返回类型；构造函数不需要用户主动调用；构造函数也支持重载
	构造函数的触发时机：创建对象时会自动触发够该类构造函数的调用
	其他：如果用户没有提供构造函数，系统会自动生成一个缺省的构造函数

5）默认构造函数
     创建对象时不需要传递任何参数的构造函数：1，构造函数不带任何的形参，2，构造函数中存在形参并且都提供了默认值
	 一个类只能有一个默认构造函数。
	 
6）初始化数据成员时存在两种形式：1，构造函数体中来逐个对数据成员进行初始化  2.通过参数初始化列表实现对数据成员的初始化
        A(形参列表):数据成员名1(值1),数据成员名2（值2）,....数据成员n(值n)
		{
		  函数体
		}
		//1.程序在执行构造函数时，如果存在初始化列表，则先执行初始化列表中的数据成员 然后在执行构造函数体
		   2.在执行初始化列表的过程中，初始化的顺序不以列表中指定的顺序来初始化 而是按照该成员来类中的定义顺序进行参数化的
		   3.什么样的情况下 需要用到初始化类别
		          如果类中的待初始化的数据成员比较多的情况下，
				  
				 类中存在常数据成员
				 类中存在引用类型的数据成员
				 类中存放 类对象并且该对象所属类中没有提供默认的构造函数
				  
	
7）匿名对象
     类名(【实参列表】)；//匿名对象的创建可以单独当做一个语句来使用，也可以充当函数中一个实参。
	 特点：只在创建匿名对象的所在行有效，执行完该行，匿名对象就会被销毁。
	 
8）拷贝构造函数 /复制构造函数
  作用：根据一个已存在的对象去初始化另一个对象
  格式：stu(const stu&src){}
  特点：拷贝构造函数只有一个形参 且该形参是当前所在类类型的一个引用类型
  触发时机：
                  用一个对象去初始化另一个对象：stu s1(s2);
				  调用函数时 我们提供是实参是一个类对象（采用值传递）
				  函数在返回一个对象时
  如果用户没有提供拷贝构造函数，系统会自动生成一个缺省的拷贝构造函数
  
  如果当前的类中的数据成员存在指针类型并指向一个堆内存。

9）析构函数
 作用：做清理收尾工作
 特点：名字必须是 ~类名 ， 不能有返回类型，不能有任何的形参；用户如果没有提供析构 系统会自动生成一个。
 触发时间：当对象在被销毁前 会自动触发

10）this 关键字
  作用：指向当前的对象
  注意：this只能用在类内的非静态成员函数中
  场景：当成员函数中的局部变量与类中的数据成员重现重名，可以用this加以区分 或返回当前对象自身的引用。






	 
	 
	 
	 










	
	
	
	
	